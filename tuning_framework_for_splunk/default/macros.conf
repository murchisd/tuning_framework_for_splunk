[tf_time_based_suppression(1)]
definition = | search NOT [| inputlookup time_based_suppression_lookup.csv | eval field=if(key_type="single",split(field,"|"),field) | mvexpand field | eval field=split(field,"|"), value=split(value,"|"), rule_name=split(rule_name,"|") | search rule_name=$rule_name$ | eval combined=if(key_type="single",mvmap(value,field."=\"".value."\""),mvzip(field,mvmap(value,"\"".value."\""),"=")), partial_search=if(key_type="single",mvjoin(combined," OR "), mvjoin(combined," AND ")) | eval partial_search="(".partial_search.")" | stats values(partial_search) as partial_search | eval search=mvjoin(partial_search, " OR ") | eval search="(".search.")" | fields search]
args = rule_name
description = Generates search string for exclusions based on time_based_suppression_lookup.csv

[tf_rba_confidence_override(1)]
definition = | eval rule_confidence=[| inputlookup rba_confidence_override.csv | eval field=if(key_type="single",split(field,"|"),field) | mvexpand field | eval field=split(field,"|"), value=split(value,"|"), rule_name=split(rule_name,"|") | search rule_name=$rule_name$ | eval first_subnet=mvfind(value,"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/(3[0-2]|[0-2]?[0-9])$") | eval second_subnet=mvfind(mvindex(value,first_subnet+1,-1),"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/(3[0-2]|[0-2]?[0-9])$")+first_subnet+1 | eval cidr_indexes=mvappend(first_subnet,second_subnet) | eval cidr_fields=mvmap(cidr_indexes,mvindex(field,cidr_indexes)) | eval combined=if(key_type="single",mvmap(value,if(match(value,"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/(3[0-2]|[0-2]?[0-9])$"),"cidrmatch(".field.",\"".value."\")","lower(".field.")=\"".value."\"")),mvzip(mvmap(field,if(field in(cidr_fields),"cidrmatch(".field,"lower(".field.")")),mvmap(value,if(match(value,"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/(3[0-2]|[0-2]?[0-9])$"),",\"".value."\")","=\"".value."\"")),"")), partial_statement=if(key_type="single",mvjoin(combined," OR "), mvjoin(combined," AND ")) | eval partial_statement=partial_statement.",".coalesce(confidence_override,"10") | stats values(partial_statement) as partial_statement | eval case="case(".mvjoin(partial_statement, ",").",true(),rule_confidence)"| appendpipe [|stats count | where count=0 | eval case="rule_confidence"] | return $case]
args = rule_name


